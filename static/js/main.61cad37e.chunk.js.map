{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","kycAddress","tokenSaleAddress","userTokens","totalSupply","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","tokenInstance","Contract","MyToken","abi","networks","address","tokenSaleInstance","MyTokenSale","kycInstance","KycContract","getTotalSupply","listenToTokenTransfer","listenToTokensPurchased","setState","updateUserTokens","alert","error","methods","balanceOf","call","updateTotalSupply","events","Transfer","to","on","TokensPurchased","handleBuyTokens","buyTokens","send","from","value","utils","toWei","handleBurnToken","burn","handleInputChange","event","target","type","checked","name","handleKycWhitelisting","setKycCompleted","this","className","id","class","alt","src","onChange","onClick","readonly","style","width","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61cad37e.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport MyToken from \"./contracts/MyToken.json\";\nimport MyTokenSale from \"./contracts/MyTokenSale.json\";\nimport KycContract from \"./contracts/KycContract.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { loaded:false, kycAddress: \"0x123...\",\n            tokenSaleAddress: null, userTokens:0,\n            totalSupply: 0 };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n    \n      this.tokenInstance = new this.web3.eth.Contract(\n        MyToken.abi,\n        MyToken.networks[this.networkId] && MyToken.networks[this.networkId].address,\n      );\n\n      this.tokenSaleInstance = new this.web3.eth.Contract(\n        MyTokenSale.abi,\n        MyTokenSale.networks[this.networkId] && MyTokenSale.networks[this.networkId].address,\n      );\n      this.kycInstance = new this.web3.eth.Contract(\n        KycContract.abi,\n        KycContract.networks[this.networkId] && KycContract.networks[this.networkId].address,\n      );\n      \n      let totalSupply = await this.getTotalSupply();\n      \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.listenToTokenTransfer();\n      this.listenToTokensPurchased();\n      this.setState({loaded:true,\n                    totalSupply:totalSupply,\n                    tokenSaleAddress:MyTokenSale.networks[this.networkId].address},\n                    this.updateUserTokens\n                    );\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  updateUserTokens = async () => {\n    let userTokens = await this.tokenInstance.methods.balanceOf(this.accounts[0]).call();\n    this.setState({userTokens: userTokens});\n    this.updateTotalSupply();\n  }\n\n  listenToTokenTransfer = () => {\n    this.tokenInstance.events.Transfer({to: this.accounts[0]}).on(\"data\",this.updateUserTokens);\n  }\n\n  listenToTokensPurchased = () => {\n    this.tokenSaleInstance.events.TokensPurchased().on(\"data\",this.updateTotalSupply);\n  }\n\n  getTotalSupply = async () => {\n    //A few days after writing this function I realised that the \n    //ERC20 token already has a totalSupply function. Silly!\n    //Worse, this here might be wrong if tokens are burnt?\n    /*\n    let weiRaised = await this.tokenSaleInstance.methods.weiRaised().call();\n    let rate = await this.tokenSaleInstance.methods.rate().call();\n    return weiRaised * rate;\n    */\n    //Now fixed here, left the stuff above for history.\n    let totalSupply = await this.tokenInstance.methods.totalSupply().call();\n    return totalSupply;\n  }\n\n  updateTotalSupply = async () => {\n    this.setState({totalSupply:await this.getTotalSupply()});\n  }\n\n  handleBuyTokens = async() => {\n    await this.tokenSaleInstance.methods.buyTokens(this.accounts[0]).send({from: this.accounts[0], value: this.web3.utils.toWei(\"1\",\"wei\")});\n  }\n\n  handleBurnToken = async() => {\n    //It will emit this event: emit Transfer(account, address(0), amount);\n    await this.tokenInstance.methods.burn(1).send({from: this.accounts[0]});\n    \n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleKycWhitelisting = async () => {\n    await this.kycInstance.methods.setKycCompleted(this.state.kycAddress).send({from: this.accounts[0]});\n    alert(\"KYC for \"+this.state.kycAddress+\" is completed\");\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div id=\"main\" class=\"round_bottom_corners\">\n        <div class=\"content\">\n        <img id=\"img_main_cup\" alt=\"Logo of a coffee cup\" src=\"coffee_cup.png\" />\n        <h1>StarDucks Cappucino Token Sale</h1>\n        <h2>Get started</h2>\n        <div class=\"flex-container\">\n          <div>\n            <p class=\"bold\">Step 1: Kyc Whitelisting</p>\n            <br />\n            <p>\n              Address to allow: <input type=\"text\" name=\"kycAddress\" value={this.state.kycAddress} onChange={this.handleInputChange} />\n              <br /><br />\n              <button type=\"button\" onClick={this.handleKycWhitelisting}>Add to Whitelist</button>\n            </p>\n          </div>\n          <div>\n            <p class=\"bold\">Step 2: Add credit</p>        \n            <br /> <br />\n            <p>If you want to buy tokens, send Wei to this address:\n            <p><input readonly style={{width: '95%'}} type=\"text\" value={this.state.tokenSaleAddress} /> </p>\n            </p>\n          </div>\n        </div>\n        <br />\n        <br />\n        <h2>Drink some coffee</h2>\n        <div class=\"flex-container\">\n          <div>\n            <p class=\"bold\">Step 3: The tokens</p>\n            <br />\n            <p>You currently have: {this.state.userTokens} CAPPU Tokens</p>\n            <br />\n            <button type=\"button\" onClick={this.handleBuyTokens}>Buy more tokens</button>\n            <br /><br />\n            <p>*Total supply of CAPPU tokens: {this.state.totalSupply}</p>\n          </div>\n          <div>\n            <p class=\"bold\">Step 4: Exchange for coffee \n            </p>\n            <br />\n            <button type=\"button\" onClick={this.handleBurnToken}>Get coffee</button>\n            <br /><br />\n            <p>\n              *(burn a token!)\n            </p>\n          </div>\n        </div>\n        <br />\n        <br />\n        <div class=\"small_centred\">\n          <p>&copy;&nbsp;Joel Brooker</p>\n        </div>\n      </div>\n      </div>\n        {/* <h1>StarDucks Cappucino Token Sale</h1>\n        <p>Get your Tokens today!</p>\n        <h2>Kyc Whitelisting</h2>\n        Address to allow: <input type=\"text\" name=\"kycAddress\" value={this.state.kycAddress} onChange={this.handleInputChange} />\n        <button type=\"button\" onClick={this.handleKycWhitelisting}>Add to Whitelist</button>\n        <h2>Buy Tokens</h2>\n        <p>If you want to buy tokens, send Wei to this address: {this.state.tokenSaleAddress}</p>\n        <p>You currently have: {this.state.userTokens} CAPPU Tokens</p>\n        <button type=\"button\" onClick={this.handleBuyTokens}>Buy more tokens</button>\n        <p>Total supply of CAPPU tokens: {this.state.totalSupply}</p>\n        <p>Get your coffee (and burn a token!)</p>\n        <button type=\"button\" onClick={this.handleBurnToken}>Get coffee</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}